pipeline {
    agent any
    parameters {
        string(name: 'CITY', defaultValue: '', description: 'Enter the city')
        string(name: 'INDUSTRY', defaultValue: '', description: 'Enter the industry')
    }
    stages {
        stage('Git Checkout') {
            steps {
                git url: 'https://github.com/gaurang153/AutoOutreach.git', branch: 'jenkins'
            }
        }
        stage('docker build') {
            steps {
                sh '''
                docker build -t autooutreach:latest .
                '''
            }
        }
        stage('Stage 1: Run Scrapping tool') {
            environment {
                ENV_FILE = './.env.sc'
            }
            steps {
                script {
                    sh """
                    docker compose down
                    docker compose --env-file ${ENV_FILE} up -d
                    """
                }
                // Add the loop to check container status
                script {
                    SERVICE_NAME = 'backend'
                    while (true) {
                        def activeContainerId = sh(script: "docker container ls --quiet --filter 'name=${SERVICE_NAME}'", returnStdout: true).trim()
                        if (activeContainerId.empty) {
                            echo "Container is not running anymore. Exiting loop."
                            break
                        }
                        echo "Container is running. Sleeping for 15 minutes."
                        sleep 60  // Sleep for 15 minutes
                    }
                    sh """
                    docker compose down
                    """
                }
            }
        }
        stage('Stage 2: Run DM Tool') {
            environment {
                ENV_FILE = './.env.dm'
            }
            steps {
                script {
                    sh """
                    docker compose down
                    docker compose --env-file }${ENV_FILE} up
                    """
                }
                // Add the loop to check container status
                script {
                    SERVICE_NAME = 'backend'
                    while (true) {
                        def activeContainerId = sh(script: "docker container ls --quiet --filter 'name=${SERVICE_NAME}'", returnStdout: true).trim()
                        if (activeContainerId.empty) {
                            echo "Container is not running anymore. Exiting loop."
                            break
                        }
                        echo "Container is running. Sleeping for 15 minutes."
                        sleep 60  // Sleep for 15 minutes
                    }
                    sh """
                    docker compose down
                    """
                }
            }
        }
    }
}